#!/usr/bin/env node

/**
 * jitsu-blessed
 */

process.title = 'jitsu';

/**
 * Debugging
 */

var _require = require;
require = function(name) {
  if (name !== 'jitsu') {
    return _require.apply(this, arguments);
  }

  var jitsu = {
    setup: function(c) { c(); },
    apps: {},
    snapshots: {},
    env: {},
    logs: {},
    config: {}
  };

  jitsu.apps.list = function(callback) {
    var out = []
      , l = 30
      , i = 0;

    for (; i < l; i++) {
      var d = Math.random() * 100 % 10 | 0;
      out.push({
        name: 'app-' + (i + 1),
        state: Math.random() > .5 ? 'started' : 'stopped',
        subdomain: 'foobar' + (i + 1),
        drones: d,
        maxDrones: 10,
        active: {
          filename: 'app-' + (i + 1) + '.tar.gz'
        }
      });
    }

    return callback(null, out);
  };

  jitsu.apps.view = function(name, callback) {
    return callback(null, {
      domains: [],
      mtime: '01/10 20:34:27 CST',
      state: 'started',
      version: '0.0.1-7',
      scripts: { start: './index.js' },
      env: { SUBDOMAIN: 'fuubar3.my-app2.fuubar3', NODE_ENV: 'production' },
      name: 'my-app2',
      subscriptionId: 2395926,
      directories: { home: 'my-app2' },
      last: {
        running: false,
        id: '0.0.1-6',
        md5: 'efa41467cf19b060c24366c2ae312c01',
        ctime: 1350943381504,
        active: false,
        filename: 'fuubar3-my-app2-0.0.1-6.tgz'
      },
      running: {
        running: false,
        id: '0.0.1-7',
        md5: '251f86b2c13433a1c3a3f1ed7783b9a4',
        ctime: '01/10 20:34:22 CST',
        active: false,
        filename: 'fuubar3-my-app2-0.0.1-7.tgz'
      },
      maxDrones: 1,
      user: 'fuubar3',
      databases: {},
      subdomain: 'fuubar3.my-app2.fuubar3',
      ctime: '10/11 03:26:52 CDT',
      snapshots: [
        { created: '10/11 03:26:54 CDT', id: '0.0.1-1' },
        { created: '10/15 21:32:26 CDT', id: '0.0.1-2' },
        { created: '10/15 21:33:09 CDT', id: '0.0.1-3' },
        { created: '10/16 03:36:35 CDT', id: '0.0.1-4' },
        { created: '10/16 22:47:03 CDT', id: '0.0.1-5' },
        { created: '10/22 17:03:01 CDT', id: '0.0.1-6' },
        { created: '01/10 20:34:22 CST', id: '0.0.1-7' }
      ],
      engines: { node: '0.8.x' },
      active: {
        running: false,
        id: '0.0.1-7',
        md5: '251f86b2c13433a1c3a3f1ed7783b9a4',
        ctime: '01/10 20:34:22 CST',
        active: false,
        filename: 'fuubar3-my-app2-0.0.1-7.tgz'
      },
      drones: 1,
      repository: {
        url: 'git://github.com/chjj/my-app2.git',
        type: 'git',
        branch: 'master'
      }
    });
  };

  jitsu.env.list = function(name, callback) {
    return callback(null, {
      SUBDOMAIN: 'fuubar3.my-app2.fuubar3',
      NODE_ENV: 'production'
    });
  };

  jitsu.apps.update = function(app, value, callback) {
    return setTimeout(function() {
      return callback();
    }, 3000);
  };

  jitsu.snapshots.list = function(name, callback) {
     return callback(null, [
       {
         "id": "0.0.0",
         "md5": "0123456789",
         "ctime": 1359715872162,
         "filename": name + "-0.0.0.tgz"
       },
       {
         "id": "0.0.1",
         "md5": "0123456789",
         "ctime": 1359715872162,
         "filename": name + "-0.0.1.tgz"
       }
     ]);
  };

  jitsu.snapshots.activate = function(app, id, callback) {
    return setTimeout(function() {
      return callback();
    }, 3000);
  };

  jitsu.logs.byApp = function(app, amount, callback) {
    var results = {
      data: [
        {
          timestamp: new Date,
          json: {
            message: 'log message here'
          }
        },
        {
          timestamp: new Date,
          json: {
            message: 'log message here again'
          }
        }
      ]
    };
    return callback(null, results);
  };

  jitsu.auth = function(callback) {
    return callback();
  };

  jitsu.config.get = function(name) {
    if (name === 'username' || name === 'password') {
      return 'foobar';
    }
  };

  jitsu.config.set = function() {};

  jitsu.config.save = function(callback) {
    return callback();
  };

  return jitsu;
};
require.__proto__ = _require;

/**
 * Modules
 */

var child_process = require('child_process')
  , spawn = child_process.spawn
  , exec = child_process.execFile
  , path = require('path')
  , util = require('util')
  , fs = require('fs')
  , EventEmitter = require('events').EventEmitter
  , blessed = require('blessed')
  , jitsu = require('jitsu');

/**
 * Context
 */

function Context(program) {
  EventEmitter.call(this);
  this.program = program;
}

Context.prototype.__proto__ = EventEmitter.prototype;

/**
 * List
 */

function List(options) {
  EventEmitter.call(this);

  this.data = options.data || [];
  this.context = options.context;

  this.index = 1;
  this.offset = 0;

  this.x = options.x || 1;
  this.y = options.y || 1;
  this.xm = options.xm || this.x + 1;
  this.ym = options.ym || this.y + 1;
  this.bottom = options.bottom;
  this.width = options.width || 1;
  this.padding = options.padding || 0;

  this.key = options.key || '';
  this._selected = options.selected || '';
  this.unselected = options.unselected || '';

  if (typeof this.xm !== 'function') {
    var xm = this.xm;
    this.xm = function() {
      return xm;
    };
  }

  if (typeof this.width !== 'function') {
    var width = this.width;
    this.width = function() {
      return width;
    };
  }

  if (this.bottom != null) {
    this.ym = function() {
      return this.context.program.rows - this.bottom;
    };
  } else if (typeof this.ym !== 'function') {
    var ym = this.ym;
    this.ym = function() {
      return ym;
    };
  }
}

List.prototype.__proto__ = EventEmitter.prototype;

List.prototype.scroll = function(i) {
  if (!i) return;

  var data = this.data
    , p = this.context.program;

  this.context.clearInput();

  if (i > 0) {
    if (this.offset + this.index === data.length) return;
  } else if (i < 0) {
    if (this.offset + this.index === 1) return;
  }

  if (this.index + i > this.ym()) {
    this.index += i;
    var r = this.index - this.ym();
    this.index = this.ym();
    this.offset += r;
    if (!data[this.offset + this.index - 1]) {
      this.offset = Math.max(this.ym(), data.length) - this.ym();
      this.index = Math.min(this.ym(), data.length);
    }
    return this.render();
  } else if (this.index + i < 1) {
    this.index += i;
    this.offset += this.index - 1;
    if (this.offset < 0) this.offset = 0;
    this.index = 1;
    return this.render();
  } else {
    var item;
    if (this.offset + (this.index - 1) + i > (data.length - 1)) {
      i = (data.length - 1) - (this.offset + (this.index - 1));
    }
    p.move(this.x, this.index);
    item = data[this.offset + this.index - 1];
    var pa = this.padding;
    while (pa--) p.write(' ');
    p.write(item[this.key] || item, this.unselected);
    this.index += i;
    p.move(this.x, this.index);
    item = data[this.offset + this.index - 1];
    var pa = this.padding;
    while (pa--) p.write(' ');
    p.write(item[this.key] || item, this._selected);
    p.move(this.x, this.index);
    // XXX
    return this.context.refresh();
  }
};

List.prototype.render = function(from) {
  var data = this.data
    , p = this.context.program;

  from = from || 1;
  p.move(this.x, from);

  var visible = this.visible(from);

  visible.forEach(function(item, i) {
    var name = item[this.key] || item
      , j = i + (from - 1);

    p.move(this.x, this.y + i);

    var pa = this.padding;
    while (pa--) p.write(' ');

    p.write(name, j === this.index - 1 ? this._selected : this.unselected);

    var pa = this.padding;
    while (pa--) p.write(' ');

    var left = this.width() - name.length;
    if (left < 1) return;
    if (left === Infinity) return p.el();
    while (left--) p.write(' ');
  }, this);

  var i = (this.y - 1) + from + visible.length - 1
    , w;

  while (i++ < this.ym()) {
    p.move(this.x, i);
    w = this.width();
    if (w === Infinity) {
      p.el();
      continue;
    }
    while (w--) p.write(' ');
  }

  p.move(this.x, this.index);
};

List.prototype.visible = function(from) {
  from = from || 1;
  return this.data.slice(this.offset + (from - 1), this.offset + this.ym());
};

List.prototype.selected = function() {
  return this.data[this.offset + this.index - 1] || 0;
};

/**
 * Statusbar
 */

function Statusbar(options) {
  EventEmitter.call(this);
  this.context = options.context;
  this.left = options.left || function() {};
  this.right = options.right || function() {};
  this.x = options.x || 1;
  this.top = !!options.top;
  this.bg = options.bg || 'black';
  this.fg = options.fg || '';
  this.rfg = options.rfg || options.rightfg || 'cyan'
}

Statusbar.prototype.__proto__ = EventEmitter.prototype;

Statusbar.prototype.render = function(left, right) {
  var p = this.context.program
    , left = left || this.left() || ''
    , right = right || this.right() || '';

  right = right.substring(0, p.cols);
  left = left.substring(0, p.cols - right.length);

  p.move(this.x, this.top ? 1 : p.rows);
  if (this.bg) p.bg(this.bg);

  p.write(left, this.fg ? this.fg + ' fg' : null);

  p.write(Array(p.cols - left.length - right.length + 1).join(' '));

  p.write(right, this.rfg ? this.rfg + ' fg' : null);

  if (this.bg) p.bg('!' + this.bg);
};

/**
 * Content
 */

function Content(options) {
  options = options || {};

  EventEmitter.call(this);

  this.index = 1;
  this.offset = options.offset || 0;
  this.text = options.text || '';
  this.data = [];
  this.context = options.context;

  this.x = options.x || 1;
  this.y = options.y || 1;
  this.xm = options.xm || this.x + 1;
  this.ym = options.ym || this.y + 1;
  this.bottom = options.bottom;
  this.width = options.width || 1;
  this.padding = options.padding || 0;

  if (typeof this.xm !== 'function') {
    var xm = this.xm;
    this.xm = function() {
      return xm;
    };
  }

  if (typeof this.width !== 'function') {
    var width = this.width;
    this.width = function() {
      return width;
    };
  }

  if (this.bottom != null) {
    this.ym = function() {
      return this.context.program.rows - this.bottom;
    };
  } else if (typeof this.ym !== 'function') {
    var ym = this.ym;
    this.ym = function() {
      return ym;
    };
  }

  this.parse();
}

Content.prototype.__proto__ = EventEmitter.prototype;

Content.prototype.scroll = function(i) {
  this.offset += i;
  return this.render();
};

Content.prototype.parse = function(content) {
  var p = this.context.program;

  if (content != null) {
    this.text = content;
  }

  if (content == null) {
    content = this.text;
  }

  var _c = content.split('\n')
    , limit = p.cols - (this.x + 1)
    , c = [];

  _c.forEach(function(line) {
    while (line.length > limit) {
      c.push(line.substring(0, limit - 1) + '-');
      line = line.substring(limit - 1);
    }
    c.push(line);
  });

  return this.data = c;
};

Content.prototype.render = function(text) {
  var p = this.context.program;

  this.parse(text);

  if (this.offset > this.data.length - this.ym()) {
    this.offset = this.data.length - this.ym();
  }

  if (this.offset < 0) {
    this.offset = 0;
  }

  var i = 0
    , l = this.ym();

  for (; i < l; i++) {
    p.move(this.x, i + 1);
    p.el();
  }

  var visible = this.visible();
  visible.forEach(function(line, i) {
    p.move(this.x, i + 1);
    p.write(line);
    p.el();
  }, this);
};

Content.prototype.visible = function() {
  return this.data.slice(this.offset, this.offset + this.ym());
};

/**
 * Input
 */

function Input(options) {
  options = options || {};
  Content.call(this, options);
}

Input.prototype.__proto__ = Content.prototype;

Input.prototype._render = Input.prototype.render;

Input.prototype.render = function() {
  var p = this.context.program;
  var ret = this._render();
  var visible = this.visible();
  var y = Math.min(this.ym(), visible.length + 1) + 1;
  p.move(this.x, y);
  p.write(Array(p.cols - (this.x + 1) + 1).join(' '), 'black bg');
  p.move(this.x, y + 2);
  p.write('   Okay   ', 'black bg');
  p.write(' ');
  p.write('   Cancel   ', 'black bg');
  p.move(this.x, y);
  p.showCursor();
  return ret;
};

/**
 * Dialog
 */

function Dialog(options) {
  options = options || {};
  Content.call(this, options);
}

Dialog.prototype.__proto__ = Content.prototype;

Dialog.prototype._render = Dialog.prototype.render;

Dialog.prototype.render = function() {
  var ret = this._render();
  var visible = this.visible();
  var y = Math.min(this.ym(), visible.length + 1) + 1;
  p.move(this.x, y);
  p.write('   Okay   ', 'black bg');
  p.write(' ');
  p.write('   Cancel   ', 'black bg');
  return ret;
};

/**
 * JitsuContext
 */

function JitsuContext(program) {
  Context.call(this, program);
  this.history = [];
}

JitsuContext.prototype.__proto__ = Context.prototype;

var context = JitsuContext.prototype;

context.start = function(opt) {
  var self = this;
  var p = this.program = opt.program;

  var longest = 0;
  opt.apps.forEach(function(app) {
    if (app.name.length > longest) {
      longest = app.name.length;
    }
  });

  this.longest = longest;

  this.left = new List({
    context: this,
    data: opt.apps,
    x: 1,
    y: 1,
    padding: 1,
    width: longest,
    bottom: 2,
    key: 'name',
    selected: 'blue bg',
    unselected: 'red fg'
  });

  this.right = new List({
    context: this,
    data: opt.right,
    x: longest + 4,
    y: 1,
    width: Infinity,
    padding: 1,
    bottom: 2,
    key: '',
    selected: 'blue bg',
    unselected: ''
  });

  this.statusbar = new Statusbar({
    context: this,
    x: 1,
    y: 1
  });

  this.content = new Content({
    text: '',
    context: this,
    bottom: 2,
    x: longest + 4,
    y: 1
  });

  this.dialog = new Dialog({
    text: '',
    context: this,
    bottom: 2,
    x: longest + 4,
    y: 1
  });

  this.input = new Input({
    text: '',
    context: this,
    bottom: 2,
    x: longest + 4,
    y: 1
  });

  var render = this.left.render;
  this.left.render = function() {
    var ret = render.apply(this, arguments);

    if (self.focus() !== self.left) {
      return;
    }

    if (!this.longestState) {
      this.longestState = 0;
      this.data.forEach(function(app) {
        if (app.state.length > this.longestState) {
          this.longestState = app.state.length;
        }
      }, this);
    }

    if (!this.longestSubdomain) {
      this.longestSubdomain = 0;
      this.data.forEach(function(app) {
        if (app.subdomain.length > this.longestSubdomain) {
          this.longestSubdomain = app.subdomain.length;
        }
      }, this);
    }

    if (!this.longestDrones) {
      this.longestDrones = 0;
      this.data.forEach(function(app) {
        var drones = app.drones + '/' + app.maxDrones;
        if (drones.length > this.longestDrones) {
          this.longestDrones = drones.length;
        }
      }, this);
    }

    this.visible().forEach(function(app, i) {
      p.move(this.x + this.padding * 2 + this.width(), this.y + i);
      // separator
      p.write('│ ');

      // state
      p.write(app.state + '', app.state === 'started' ? 'green fg' : 'black fg');
      j = this.longestState - app.state.length;
      while (j--) p.write(' ');

      // separator
      //p.write(' │ ');
      p.write('   ');

      // subdomain
      p.write(app.subdomain + '', 'black fg');
      j = this.longestSubdomain - app.subdomain.length;
      while (j--) p.write(' ');

      // separator
      p.write('   ');

      // drones
      var drones = app.drones + '/' + app.maxDrones;
      p.write(drones, 'yellow fg');
      j = this.longestDrones - drones.length;
      while (j--) p.write(' ');

      // separator
      p.write('   ');

      // snapshot
      p.write(app.active.filename);

      // clear
      p.el();
    }, this);

    return ret;
  };

  this.statusbar.refresh = function() {
    self.statusbar.render(
      self.left.selected().name,
      jitsu.config.get('username'));
  };

  this.focus(this.left);
};

context.focus = function(target) {
  return !target
    ? this.history[this.history.length-1] || this.left
    : this.history.push(target);
};

context.focusPrevious = function() {
  return this.history.pop();
};

context.scroll = function(i) {
  return this.focus().scroll(i);
};

context.render = function() {
  var p = this.program;

  var longest = this.longest;
  var out = Array(longest + 2 + 1).join('─');
  out += '┴';
  out += Array(p.cols - 10 + 1).join('─');
  p.move(1, p.rows - 1);
  p.write(out);

  this.statusbar.refresh();

  this.focus().render();
};

context.refresh = function() {
  this.statusbar.refresh();
};

context.resize = function() {
  var p = this.program;
  if (this.left.index > p.rows - 2) {
    this.left.index = p.rows - 2;
  }
  if (this.right.index > p.rows - 2) {
    this.right.index = p.rows - 2;
  }
  this.render();
};

context.mouse = function(key) {
  var p = this.program;

  if (key.action === 'wheelup') {
    return this.key(null, { name: 'u' });
  }

  if (key.action === 'wheeldown') {
    return this.key(null, { name: 'd' });
  }

  if (key.action === 'mousedown' && key.button === 'left') {
    var focus = this.focus();

    if (focus instanceof List) {
      if (key.x >= focus.x) {
        return focus.index === key.y
          ? this.key(null, { name: 'enter' })
          : this.scroll(key.y - focus.index);
      } else {
        this.focusPrevious();
        this.render();
        return this.mouse(key);
      }
    }

    if (focus === this.dialog || focus === this.input) {
      if (key.x >= this.dialog.x && key.x <= this.dialog.x + 10) {
        return this.key(null, { name: 'enter' });
      } else if (key.x >= this.dialog.x + 11 && key.x <= this.dialog.x + 21) {
        return this.key(null, { name: 'escape' });
      }
    }

    return;
  }

  // XXX Change color on hover.
  if (0 && key.action === 'mouseup') {
    if (this.focus() === this.dialog || this.focus() === this.input) {
      p.saveCursor();
      if (key.y === 6) {
        if (key.x >= this.dialog.x && key.x <= this.dialog.x + 10) {
          p.move(this.dialog.x, 6);
          p.write('   Okay   ', 'green bg');
          p.move(this.dialog.x + 11, 6);
          p.write('   Cancel   ', 'black bg');
        } else if (key.x >= this.dialog.x + 11 && key.x <= this.dialog.x + 21) {
          p.move(this.dialog.x, 6);
          p.write('   Okay   ', 'black bg');
          p.move(this.dialog.x + 11, 6);
          p.write('   Cancel   ', 'green bg');
        } else {
          p.move(this.dialog.x, 6);
          p.write('   Okay   ', 'black bg');
          p.move(this.dialog.x + 11, 6);
          p.write('   Cancel   ', 'black bg');
        }
      } else {
        p.move(this.dialog.x, 6);
        p.write('   Okay   ', 'black bg');
        p.move(this.dialog.x + 11, 6);
        p.write('   Cancel   ', 'black bg');
      }
      p.restoreCursor();
    }
  }
};

context.key = function(ch, key) {
  var self = this
    , context = this
    , p = this.program;

  if (p._needsClear) {
    p._needsClear = false;
    p.move(1, p.rows);
    p.eraseInLine('right');
    //this.render();
    this.refresh();
  }

  if (key.name === 'mouse') {
    return;
  }

  if (this.focus() === this.input) {
    this.input._text = this.input._text || '';

    if (key.name === 'backspace' && !this.input._text) {
      return this.key(null, { name:'escape' });
    }

    if (key.name === 'backspace') {
      this.input._text = this.input._text.slice(0, -1);
      p.back();
      p.write(' ', 'black bg');
      p.back();
      return;
    }

    if (key.name === 'enter') {
      this.focusPrevious();
      p.hideCursor();
      if (this.input.callback) {
        this.input.callback(this.input._text);
        this.input.callback = null;
      }
      this.input._text = '';
      return this.render();
    }

    if (key.name === 'escape') {
      this.focusPrevious();
      p.hideCursor();
      if (this.input.callback) {
        this.input.callback();
        this.input.callback = null;
      }
      this.input._text = '';
      return this.render();
    }

    if (ch) {
      this.input._text += ch;
      p.write(ch, 'black bg');
    }

    return;
  }

  if (p._enter) {
    if (key.name === 'enter') {
      p.hideCursor();
      p.eraseInLine('left');

      var enter = p._enter;
      p._lastEnter = enter;
      delete p._enter;

      var parts = enter.data.split(' ')
        , cmd = parts[0]
        , val = parts.slice(1).join(' ');

      if (cmd === 'echo') {
        return this.echo(val);
      }

      if (cmd === 'q') {
        return this.exit();
      }

      return;
    }

    if (key.name === 'backspace') {
      if (!p._enter.data.length) {
        p.eraseInLine('left');
        return this.key(null, {name:'escape'});
      }
      p._enter.data = p._enter.data.slice(0, -1);
      p.back();
      p.deleteChars();
      return;
    }

    if (key.name === 'escape') {
      p._enter.canceled = true;
      p._lastEnter = p._enter;
      delete p._enter;
      p.hideCursor();
      p.eraseInLine('left');
      return this.render();
    }

    if (ch) {
      p._enter.data += ch;
      p.write(ch);
      return;
    }

    return;
  }

  if (key.name === 'down' || key.name === 'j') {
    return this.scroll(1);
  }

  if (key.name === 'up' || key.name === 'k') {
    return this.scroll(-1);
  }

  if (key.name === 'd') {
    return this.scroll(this.focus().ym() / 2 | 0);
  }

  if (key.name === 'u') {
    return this.scroll(-(this.focus().ym() / 2 | 0));
  }

  if (key.name === 'f') {
    return this.scroll(this.focus().ym());
  }

  if (key.name === 'b') {
    return this.scroll(-this.focus().ym());
  }

  if (ch === 'H') {
    return this.scroll(1 - this.focus().index);
  }

  if (ch === 'M') {
    return this.scroll((Math.min(this.focus().ym(), this.focus().data.length) / 2 | 0) - this.focus().index);
  }

  if (ch === 'L') {
    return this.scroll(Math.min(this.focus().ym(), this.focus().data.length) - this.focus().index);
  }

  if (ch === 'g') {
    return this.scroll(-Math.max(this.focus().data.length, p.rows));
  }

  if (ch === 'G') {
    return this.scroll(Math.max(this.focus().data.length, p.rows));
  }

  if (key.name === 'escape'
      || key.name === 'h'
      || key.name === 'left'
      || key.name === 'q'
      || (key.ctrl && key.name === 'c')) {
    if (this.focus() === this.left) {
      return this.exit();
    }
    this.focusPrevious();
    return this.render();
  }

  if (key.name === 'right'
      || key.name === 'l'
      || key.name === 'enter') {
    if (this.focus() === this.left) {
      this.right.offset = 0;
      this.right.index = 1;
      this.focus(this.right);
      return this.render();
    }

    if (this.focus() === this.right) {
      return this.executeRight(this.right.selected());
    }

    if (this.focus() === this.snapshots) {
      this.startLoading();
      return jitsu.snapshots.activate(this.left.selected().name, this.snapshots.selected().id, function() {
        self.stopLoading();
        self.echo('Activated.');
      });
    }

    if (this.focus() === this.env) {
      var name = this.env.selected().key;
      return this.setInput('Editing env: ' + name, function(input) {
        var data = {};
        data[self.env.selected().key] = input;
        self.startLoading();
        return jitsu.apps.update(self.left.selected().name, data, function() {
          self.stopLoading();
          self.echo('Saved variable: ' + name);
        });
      });
    }

    return this.render();
  }

  if (key.name === 's' || ch === ':') {
    p.move(1, p.rows);
    p.eraseInLine('right');
    p.showCursor();
    p.write(':');
    p._enter = {
      id: this.left.selected().name,
      data: ''
    };
    return;
  }
};

context.echo = function(text, noClear) {
  var p = this.program;
  p.move(1, p.rows);
  p.eraseInLine('right');
  p.write(text);
  p._needsClear = !noClear;
};

context.exit = function(msg) {
  var p = this.program;
  p.disableMouse();
  p.clear();
  p.showCursor();
  p.normalBuffer();
  if (msg) console.error(msg);
  return process.exit(0);
};

context.error = context.exit;

context.clearInput = function() {
  var p = this.program;
  if (p._enter) {
    this.key('\x1b', { name: 'escape' });
  }
};

context.setContent = function(text) {
  this.content.offset = 0;
  this.content.text = text;
  this.content.parse(text);
  this.focus(this.content);
  this.render();
};

context.setInput = function(text, cb) {
  this.input.offset = 0;
  this.input.parse(text);
  this.input.callback = cb;
  this.focus(this.input);
  this.render();
};

context.setDialog = function(text, cb) {
  this.dialog.offset = 0;
  this.dialog.parse(text);
  this.dialog.callback = cb;
  this.focus(this.dialog);
  this.render();
};

context.startLoading = function() {
  var self = this;
  var i = 0;
  var loadsym = ['|', '/', '-', '\\'];
  this.load = setInterval(function() {
    self.echo('Loading... ' + loadsym[i], true);
    if (++i === loadsym.length) i = 0;
  }, 300);
};

context.stopLoading = function() {
  if (this.load) {
    clearInterval(this.load);
    delete this.load;
  }
  this.echo('');
};

context.executeRight = function(option) {
  var self = this;

  if (option === 'start') {
    self.startLoading();
    return setTimeout(function() {
      self.stopLoading();
      self.echo('Done starting.');
    }, 5000);
  }

  if (option === 'restart') {
    self.startLoading();
    return setTimeout(function() {
      self.stopLoading();
      self.echo('Done restarting.');
    }, 5000);
  }

  if (option === 'stop') {
    self.startLoading();
    return setTimeout(function() {
      self.stopLoading();
      self.echo('Done stopping.');
    }, 5000);
  }

  if (option === 'deploy') {
    return this.setInput('Deploy from where? \ne.g. ~/node_modules/foobar.', function(input) {
      if (!input) return;
      input = input.replace(/^~/, process.env.HOME);
      self.startLoading();
      setTimeout(function() {
        self.stopLoading();
        self.echo(input);
      }, 5000);
    });
  }

  if (option === 'destroy') {
    var msg = 'Deleting application: '
      + this.left.selected().name + '.'
      + '\nAre you sure? Type `yes` to continue.';
    return this.setInput(msg, function(input) {
      if (!input) return;
      self.startLoading();
      setTimeout(function() {
        self.stopLoading();
        self.echo(input);
      }, 5000);
    });
  }

  if (option === 'setdrones') {
    var msg = 'Drones for application: '
      + this.left.selected().name + '.'
      + '\nCurrent drones: N/A.'
      + '\nEnter the number of drones desired:';
    return this.setInput(msg, function(input) {
      if (!input) return;
      self.startLoading();
      setTimeout(function() {
        self.stopLoading();
        self.echo(input);
      }, 5000);
    });
  }

  if (option === 'view') {
    var name = this.left.selected().name;
    return jitsu.apps.view(name, function(err, app) {
      return err
        ? self.setContent(err.stack)
        : self.setContent(inspect(app));
    });
  }

  if (option === 'snapshots') {
    return jitsu.snapshots.list(this.left.selected().name, function(err, snapshots) {
      if (err) return;

      snapshots.forEach(function(snapshot) {
        snapshot.text = snapshot.id
          + ' - '
          + snapshot.filename
          + ' - '
          + new Date(snapshot.ctime).toUTCString();
      });

      self.snapshots = new List({
        context: self.right.context,
        data: snapshots,
        x: self.right.x,
        y: self.right.y,
        width: self.right.width(),
        padding: self.right.padding,
        bottom: self.right.bottom,
        key: 'text',
        selected: self.right._selected,
        unselected: self.right.unselected
      });

      self.focus(self.snapshots);

      return self.render();
    });
  }

  if (option === 'env') {
    return jitsu.env.list(this.left.selected().name, function(err, env) {
      if (err) return;

      var data = [];

      Object.keys(env).forEach(function(key) {
        data.push({
          key: key,
          val: env[key],
          text: key + ': ' + env[key]
        });
      });

      self.env = new List({
        context: self.right.context,
        data: data,
        x: self.right.x,
        y: self.right.y,
        width: self.right.width(),
        padding: self.right.padding,
        bottom: self.right.bottom,
        key: 'text',
        selected: self.right._selected,
        unselected: self.right.unselected
      });

      self.focus(self.env);

      return self.render();
    });
  }

  if (option === 'logs') {
    return jitsu.logs.byApp(this.left.selected().name, 20, function(err, results) {
      if (err) return;

      var data = [];

      function sort(first, second) {
        return new Date(first.timestamp) - new Date(second.timestamp);
      }

      results.data.sort(sort).forEach(function(log) {
        if (log.json && log.json.message != null) {
          log.json.message.split('\n').forEach(function (line) {
            data.push({
              date: new Date(log.timestamp),
              message: line,
              text: new Date(log.timestamp).toUTCString() + ' - ' + line
            });
          });
        }
      });

      self.logs = new List({
        context: self.right.context,
        data: data,
        x: self.right.x,
        y: self.right.y,
        width: self.right.width(),
        padding: self.right.padding,
        bottom: self.right.bottom,
        key: 'text',
        selected: self.right._selected,
        unselected: self.right.unselected
      });

      self.focus(self.logs);

      return self.render();
    });
  }
};

function start(opt, callback) {
  var program = blessed()
    , context = new JitsuContext(program);

  if (!program.output.isTTY) {
    console.log(apps);
    return process.exit(0);
  }

  program.setTitle('jitsu');
  program.alternateBuffer();
  program.enableMouse();
  program.clear();
  program.hideCursor();

  process.on('uncaughtException', function(err) {
    err = err || '';
    err = err.message || err;
    context.error(err + '');
  });

  context.start({
    program: program,
    apps: opt.apps,
    right: [
      'deploy',
      //'list',
      //'create',
      'view',
      //'update',
      'destroy',
      'start',
      'restart',
      'stop',
      'setdrones',
      'logs',
      'snapshots',
      'env'
    ]
  });

  program.on('mouse', context.mouse.bind(context));
  program.on('keypress', context.key.bind(context));
  program.on('resize', context.resize.bind(context));

  context.render();

  function typeUsername(callback) {
    if (jitsu.config.get('username')) return callback();
    return context.setInput('Type your username:', callback);
  }

  function typePassword(callback) {
    if (jitsu.config.get('password')) return callback();
    return context.setInput('Type your password:', callback);
  }

  if (!jitsu.config.get('username') || !jitsu.config.get('password')) {
    return typeUsername(function(input) {
      if (input) jitsu.config.set('username', input);
      return typePassword(function(input) {
        if (input) jitsu.config.set('password', input);
        return jitsu.auth(function (err) {
          if (err) {
            return context.error(err.message);
          }
          return jitsu.config.save(function (err) {
            if (err) {
              return context.error(err.message);
            }
          });
        });
      });
    });
  }

/*
  if (!jitsu.config.get('username')) {
    return context.setInput('Type your username', function(input) {
      jitsu.config.set('username', input);
      return context.setInput('Type your password', function(input) {
        jitsu.config.set('password', input);
        return jitsu.auth(function (err) {
          if (err) {
            return context.error(err.message);
          }
          return jitsu.config.save(function (err) {
            if (err) {
              return context.error(err.message);
            }
            return callback();
          });
        });
      });
    });
  }
*/
}

function parseArg(argv) {
  var argv = argv.slice(2)
    , options = {}
    , files = [];

  function getarg() {
    var arg = argv.shift();

    if (arg.indexOf('--') === 0) {
      // e.g. --opt
      arg = arg.split('=');
      if (arg.length > 1) {
        // e.g. --opt=val
        argv.unshift(arg.slice(1).join('='));
      }
      arg = arg[0];
    } else if (arg[0] === '-') {
      if (arg.length > 2) {
        // e.g. -abc
        argv = arg.substring(1).split('').map(function(ch) {
          return '-' + ch;
        }).concat(argv);
        arg = argv.shift();
      } else {
        // e.g. -a
      }
    } else {
      // e.g. foo
    }

    return arg;
  }

  while (argv.length) {
    arg = getarg();
    switch (arg) {
      case '-h':
      case '--help':
        return help();
      default:
        files.push(arg);
        break;
    }
  }

  return options;
}

var opt = parseArg(process.argv);

function help() {
  console.log('todo');
  return process.exit(0);
}

function poll(options, callback) {
  options = options || {};
  callback = callback || function() {};

  return jitsu.apps.list(function(err, apps) {
    if (err) return callback(err);

    if (options.update !== false) {
      opt.apps = opt.apps || [];
      opt.apps.length = 0;
      opt.apps.push.apply(opt.apps, apps);
    }

    return callback(null, {
      apps: apps
    });
  });
}

function beginPoll() {
  (function self() {
    return poll({}, function() {
      return setTimeout(self, 10 * 1000);
    });
  })();
}

function main(argv, callback) {
  return jitsu.setup(function() {
    beginPoll();
    return poll({}, function(err) {
      if (err) return callback(err);
      return start(opt, function(err) {
        if (err) return callback(err);
        return callback();
      });
    });
  });
}

function inspect(obj) {
  return typeof obj !== 'string'
    ? util.inspect(obj, false, 6, true)
    : obj;
}

function print(obj) {
  return typeof obj === 'object'
    ? process.stdout.write(inspect(obj) + '\n')
    : console.log.apply(console, arguments);
}

if (!module.parent) {
  main(process.argv.slice(), function(err) {
    if (err) throw err;
    return process.exit(0);
  });
} else {
  module.exports = main;
}
