#!/usr/bin/env node

/**
 * jitsu-ui
 * Copyright (c) 2013, Christopher Jeffrey
 * Copyright (c) 2013, Nodejitsu Inc.
 * https://github.com/chjj/jitsu-ui
 */

/**
 * Modules
 */

var fs = require('fs')
  , blessed = require('blessed')
  , napi = require('nodejitsu-api')
  , cache = {}
  , api
  , config
  , opt;

function jitsu(args, cwd, callback) {
  var screen = createScreen()
    , opt;

  if (!callback) {
    callback = cwd;
    cwd = process.cwd();
  }

  tempSave();

  args.unshift(opt.userconfig + '.tmp');
  args.unshift('--userconfig');

  opt = {
    env: process.env,
    cwd: cwd
  };

  screen.exec('jitsu', args, opt, function(err, success) {
    tempRemove();
    return callback(err, success);
  });
}

function start(data, callback) {
  var app;

  handleData(data);

  function refreshData(callback) {
    return auth(function(err, user, apps) {
      if (user) {
        data.user = user;
        data.user = data.user.user || data.user;
      }

      if (apps) {
        data.apps = apps;
      }

      handleData(data);

      side.setItems(['user'].concat(data.apps.map(function(app) {
        if (app.state === 'started') return '{green-fg}' + app.name + '{/green-fg}';
        if (app.state === 'stopped') return '{red-fg}' + app.name + '{/red-fg}';
        return app.name;
      })));

      side.emit('scroll');

      return callback();
    });
  }

  var screen = createScreen();

  var side = blessed.list({
    parent: screen,
    mouse: true,
    keys: true,
    vi: true,
    left: 0,
    top: 0,
    bottom: 0,
    width: data.side,
    selectedBg: 'blue',
    items: ['user'].concat(data.apps.map(function(app) {
      if (app.state === 'started') return '{green-fg}' + app.name + '{/green-fg}';
      if (app.state === 'stopped') return '{red-fg}' + app.name + '{/red-fg}';
      return app.name;
    })),
    itemHoverBg: 'blue',
    tags: true
  });

  side.on('select', function() {
    main.focus();
  });

  var sep = blessed.line({
    parent: screen,
    orientation: 'vertical',
    left: data.side,
    top: 0,
    bottom: 0
  });

  var main = blessed.scrollabletext({
    parent: screen,
    mouse: true,
    keys: true,
    vi: true,
    scrollbar: {
      bg: 'blue',
      ch: ' '
    },
    tags: true,
    left: data.side + 2,
    top: 0,
    bottom: 1,
    right: 0
  });

  screen.setEffects(sep, main, 'focus', 'blur', { border: { fg: 'blue' } });

  var bar = blessed.box({
    parent: screen,
    left: data.side + 1,
    right: 0,
    bottom: 0,
    height: 1,
    align: 'right',
    content: data.user.username,
    fg: 'blue'
  });

  var drawn = 0;
  var commands = {
    'deploy': {
      prefix: '1',
      keys: ['1'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        var id = app.user + '/' + app.name;

        function getPath(callback) {
          var cwd = process.cwd().replace(process.env.HOME, '~');

          if (cwd[cwd.length-1] !== '/') cwd += '/';

          if (cache[id]) {
            return callback(null, cache[id]);
          }

          var text = 'Deploy from where? (e.g. {blue-fg}~/node_modules/foobar{/})';

          return prompt._.type(text, cwd, function(err, res) {
            if (err) return callback(err);
            return callback(null, res);
          });
        }

        return getPath(function(err, dir) {
          if (err) {
            return msg._.error(err.message);
          }

          if (!dir) {
            return;
          }

          dir = dir.replace(/^~/, process.env.HOME);

          function deploy(callback) {
            var args = ['deploy'];
            return getCloud(app, function(err, cloud) {
              if (err) return msg._.error(err.message);
              if (!cloud) return;

              loading._.load('App is being {blue-fg}deployed{/}. Please wait...');

              if (opt.debug) {
                return setTimeout(loading._.stop, 5000);
              }

              args.push('--provider');
              args.push(cloud.provider);
              args.push('--datacenter');
              args.push(cloud.datacenter);
              args.push('--drones');
              args.push(cloud.drones);
              args.push('--ram');
              args.push(cloud.ram);

              return jitsu(args, dir, callback);
            });
          }

          return deploy(function(err, success) {
            if (err) {
              loading._.stop();
              return msg._.error(err.message);
            }

            if (!success) {
              loading._.stop();
              return msg._.error('Deploy was not successful.');
            }

            cache[id] = dir;

            return refreshData(function() {
              loading._.stop();
            });
          });
        });
      }
    },

    'destroy': {
      prefix: '2',
      keys: ['2'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        var text = 'Are you sure you want to destroy this?'
          + ' If so, type the app name.';

        return prompt._.type(text, function(err, res) {
          if (err) return msg._.error(err.message);

          if (!res) return;

          if (res !== app.name) {
            msg._.error('Bad app name.');
            return;
          }

          loading._.load('App is being {blue-fg}destroyed{/}. Please wait...');

          return api.apps.destroy(app.name, function(err) {
            if (err) {
              loading._.stop();
              return msg._.error(err.message);
            }
            return refreshData(function() {
              loading._.stop();
            });
          });
        });
      }
    },

    'start': {
      prefix: '3',
      keys: ['3'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        var text = 'Are you sure you want to {blue-fg}start{/} {green-fg}'
          + app.name + '{/}? (y/n)';

        return question._.ask(text, function(err, res) {
          if (err) {
            loading._.stop();
            return msg._.error(err.message);
          }

          if (!res) {
            loading._.stop();
            return;
          }

          loading._.load('App is being {blue-fg}started{/}. Please wait...');

          return api.apps.start(app.name, function(err) {
            if (err) {
              loading._.stop();
              return msg._.error(err.message);
            }
            return refreshData(function() {
              loading._.stop();
            });
          });
        });
      }
    },

    'restart': {
      prefix: '4',
      keys: ['4'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        var text = 'Are you sure you want to restart {blue-fg}restart{/} {green-fg}'
          + app.name + '{/}? (y/n)';

        return question._.ask(text, function(err, res) {
          if (err) {
            loading._.stop();
            return msg._.error(err.message);
          }

          if (!res) {
            loading._.stop();
            return;
          }

          loading._.load('App is being {blue-fg}restarted{/}. Please wait...');

          return api.apps.restart(app.name, function(err) {
            if (err) {
              loading._.stop();
              return msg._.error(err.message);
            }
            return refreshData(function() {
              loading._.stop();
            });
          });
        });
      }
    },

    'stop': {
      prefix: '5',
      keys: ['5'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        var text = 'Are you sure you want to {blue-fg}stop{/} {green-fg}'
          + app.name + '{/}? (y/n)';

        return question._.ask(text, function(err, res) {
          if (err) {
            loading._.stop();
            return msg._.error(err.message);
          }

          if (!res) {
            loading._.stop();
            return;
          }

          loading._.load('App is being {blue-fg}stopped{/}. Please wait...');

          return api.apps.stop(app.name, function(err) {
            if (err) {
              loading._.stop();
              return msg._.error(err.message);
            }
            return refreshData(function() {
              loading._.stop();
            });
          });
        });
      }
    },

    'logs': {
      prefix: '6',
      keys: ['6'],
      callback_: function() {
        if (!app) return msg._.error('Not an app!');

        var time
          , done
          , data;

        (function poll() {
          return api.logs.byApp(app.name, 20, function(err, results) {
            if (done) return;

            results = results || {};
            results.data = results.data || [];

            data = [];

            function sort(first, second) {
              return new Date(second.timestamp) - new Date(first.timestamp);
            }

            results.data.sort(sort).forEach(function(log) {
              if (log.json && log.json.message != null) {
                data.push({
                  date: new Date(log.timestamp),
                  message: log.json.message,
                  dmessage: new Date(log.timestamp).toUTCString() + '\n' + log.json.message,
                  text: log.json.message.split('\n')[0],
                });
              }
            });

            var items = data.map(function(log) {
              return log.text;
            });

            if (!items.length) {
              items.push('--- No logs. ---');
            }

            if (screen.focused !== mlist) {
              mlist._.show(items);
            } else {
              mlist.setItems(items);
            }

            screen.render();

            time = setTimeout(poll, 10 * 1000);
          });
        })();

        mlist.on('action', function fn(el, index) {
          if (!el) {
            done = true;
            if (time) clearTimeout(time);
            mlist.removeListener('action', fn);
            return;
          }
          if (!data[index]) return;
          info._.show(data[index].dmessage, function() {
          });
        });
      },
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        var time
          , done;

        screen.saveFocus();
        main.focus();

        (function poll() {
          return api.logs.byApp(app.name, 20, function(err, results) {
            if (done) return;

            var out = '';

            results = results || {};
            results.data = results.data || [];

            function sort(first, second) {
              return new Date(second.timestamp) - new Date(first.timestamp);
            }

            results.data.sort(sort).forEach(function(log) {
              if (log.json && log.json.message != null) {
                out += '{green-fg}'
                  + new Date(log.timestamp).toUTCString()
                  + '{/green-fg}' + '\n';
                out += log.json.message + '\n';
              }
            });

            if (!results.data.length) {
              out = '--- No logs. ---';
            }

            main.setContent(out);

            screen.render();

            time = setTimeout(poll, 10 * 1000);
          });
        })();

        main.on('keypress', function fn(ch, key) {
          if (key.name === 'escape' || key.name === 'q') {
            done = true;
            if (time) clearTimeout(time);
            side.emit('scroll');
            main.removeListener('keypress', fn);
            screen.restoreFocus();
          }
        });
      }
    },

    'snapshots': {
      prefix: '7',
      keys: ['7'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        return api.apps.view(app.name, function(err, app_) {
          if (err) return msg._.error(err.message);

          app = data._apps[side.selected - 1] = app_;

          return api.snapshots.list(app.name, function(err, snapshots) {
            if (err) return msg._.error(err.message);

            var active;

            active = app.active || app.running || app.last || {};
            active = active.id || app.version;

            var data = snapshots.map(function(snapshot) {
              var out = snapshot.id + ' - '
                + snapshot.filename + ' - '
                + new Date(snapshot.ctime).toUTCString();

              if (active === snapshot.id) {
                return '{green-fg}' + out + '{/green-fg}';
              }

              return out;
            });

            mlist._.show(data);

            screen.render();

            mlist.once('action', function fn(el, index) {
              if (!el) {
                mlist.removeListener('action', fn);
                return;
              }

              var i = data.indexOf(el.content.replace(/\{[^{}]+\}/g, ''));

              loading._.load(
                'Snapshot is being {blue-fg}activated{/}.'
                + ' Please wait...');

              return api.snapshots.activate(app.name, snapshots[i].id, function(err) {
                if (err) return msg._.error(err.message);
                return refreshData(function() {
                  loading._.stop();
                });
              });
            });
          });
        });
      }
    },

    'env': {
      prefix: '8',
      keys: ['8'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        return api.apps.view(app.name, function(err, app_) {
          if (err) return msg._.error(err.message);

          app = data._apps[side.selected - 1] = app_;

          var env = app.env || {}
            , out = ['-- New --'];

          Object.keys(env).forEach(function(key) {
            out.push(key + '=' + env[key]);
          });

          var focused = screen.focused;

          mlist._.show(out);

          screen.render();

          mlist.on('action', function fn(el, index) {
            if (!el) {
              focused.focus();
              mlist.removeListener('action', fn);
              return;
            }

            function getVal(callback) {
              if (index === 0) {
                return prompt._.type('Name:', function(err, key) {
                  if (err) return callback(err);
                  if (key == null) return callback();
                  return prompt._.type('Value of ' + key + ':', function(err, res) {
                    if (err) return callback(err);
                    if (res == null) return callback();
                    return callback(null, key, res);
                  });
                });
              }

              var parts = out[index].split('=')
                , key = parts[0]
                , val = parts[1];

              return prompt._.type('Value of ' + key + ':', val, function(err, res) {
                if (err) return callback(err);
                if (res == null) return callback();
                return callback(null, key, res);
              });
            }

            return getVal(function(err, key, val) {
              mlist.focus();

              if (err) return msg._.error(err.message);

              if (key == null || val == null) return;

              var body = { env: app.env || {} };

              if (val === '') {
                delete body.env[key];
              } else {
                body.env[key] = val;
              }

              loading._.load(
                'Environment variable is being {blue-fg}set{/}.'
                + ' Please wait...');

              return api.apps.update(app.name, body, function(err) {
                if (err) {
                  loading._.stop();
                  return msg._.error(err.message);
                }
                return refreshData(function() {
                  mlist.removeListener('action', fn);
                  loading._.stop();
                  bar._.env._.callback();
                });
              });
            });
          });
        });
      }
    },

    'cloud': {
      prefix: '9',
      keys: ['9'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        return getCloud(app, function(err, cloud) {
          if (err) return msg._.error(err.message);

          if (!cloud) return;

          loading._.load('App is being {blue-fg}updated{/}. Please wait...');

          return api.apps.endpoints(function(err, endpoints) {
            if (err) {
              loading._.stop();
              return msg._.error(err.message);
            }
            return api.apps.datacenter(app.name, cloud, function(err) {
              if (err) {
                loading._.stop();
                return msg._.error(err.message);
              }
              return refreshData(function() {
                var tld = endpoints[cloud.provider][cloud.datacenter];
                loading._.stop();
                msg._.log('Running on http://'
                  + app.subdomain
                  + tld.replace('api', ''));
              });
            });
          });
        });
      }
    },

    'browse': {
      prefix: '0',
      keys: ['0'],
      callback: function() {
        if (!app) return msg._.error('Not an app!');

        try {
          require('opener')('https://' + (app.domain
            || (app.domains && app.domains[0])
            || (app.subdomain + '.jit.su'))
          );
        } catch (e) {
          jitsu(['apps', 'browse', app.name], function() {
            ;
          });
        }
      }
    },

    'exit': {
      prefix: 'ESC',
      callback: function() {
        screen.emit('keypress', '\x1b', { name: 'escape' });
      }
    }
  };

  Object.keys(commands).forEach(function(name) {
    var cmd = commands[name]
      , title
      , len
      , button;

    title = '{light-black-fg}'
      + cmd.prefix
      + '{/light-black-fg}'
      + ':'
      + name;

    len = (cmd.prefix + ':' + name).length;

    button = blessed.button({
      parent: bar,
      top: 0,
      left: drawn + 1,
      height: 1,
      content: title,
      width: len + 2,
      align: 'center',
      tags: true,
      autoFocus: false,
      hoverEffects: {
        bg: 'blue'
      },
      focusEffects: {
        bg: 'blue'
      }
    });

    bar._[name] = button;
    cmd.element = button;

    if (cmd.callback) {
      button.on('press', cmd.callback);
      if (cmd.keys) {
        screen.key(cmd.keys[0], cmd.callback);
      }
    }

    drawn += len + 3;
  });

  screen.on('keypress', function(ch, key) {
    if (key.name === 'tab') {
      if (!key.shift) {
        screen.focusNext();
      } else {
        screen.focusPrev();
      }
      screen.render();
      return;
    }
    if (key.name === 'escape') {
      if (screen.focused === side) {
        return process.exit(0);
      }
      if (screen.focused === main || screen.focused.parent === bar) {
        side.focus();
        screen.render();
        return;
      }
    }
  });

  side.on('scroll', function() {
    if (side.selected < 1) {
      app = null;
      if (side.selected === 0) {
        main.resetScroll();
        main.setContent(formatMain({ fix: true }, data._user, main.width));
      }
    } else {
      app = data._apps[side.selected - 1];
      main.resetScroll();
      main.setContent(formatMain({ fix: true }, app, main.width));
    }
    screen.render();
  });

  screen.setEffects(side, side, 'blur', 'focus', { selectedBg: 'black' });
  screen.setEffects(
    function() { return side.items[side.selected]; },
    side, 'blur', 'focus', { bg: 'black' });

  side.select(0);
  side.focus();

  var mlist = blessed.list({
    parent: screen,
    left: main.left,
    top: main.top,
    bottom: main.bottom,
    right: main.right,
    hidden: true,
    selectedBg: 'blue',
    mouse: true,
    keys: true,
    vi: true,
    tags: true,
    scrollbar: {
      bg: 'blue',
      ch: ' '
    },
  });

  mlist._.show = function(data, focused) {
    screen.restoreFocus();
    screen.saveFocus();
    mlist.show();
    mlist.setItems(data);
    mlist.select(0);
    mlist.focus();
  };

  mlist.on('cancel', function() {
    mlist.hide();
    screen.restoreFocus();
    screen.render();
  });

  var prompt = createPrompt();
  var question = createQuestion();

  var loading = blessed.box({
    parent: screen,
    hidden: true,
    top: 'center',
    left: 'center',
    width: 'half',
    height: 4,
    border: {
      type: 'ascii'
    },
    tags: true,
    align: 'center'
  });

  loading._.icon = blessed.text({
    parent: loading,
    align: 'center',
    top: 2,
    left: 1,
    right: 1,
    height: 1,
    content: '|'
  });

  loading._.load = function(text) {
    loading.show();
    loading.setContent(text);
    if (loading._.timer) {
      loading._.stop();
    }
    screen.lockKeys = true;
    loading._.timer = setInterval(function() {
      if (loading._.icon.content === '|') {
        loading._.icon.setContent('/');
      } else if (loading._.icon.content === '/') {
        loading._.icon.setContent('-');
      } else if (loading._.icon.content === '-') {
        loading._.icon.setContent('\\');
      } else if (loading._.icon.content === '\\') {
        loading._.icon.setContent('|');
      }
      screen.render();
    }, 200);
  };

  loading._.stop = function() {
    screen.lockKeys = false;
    loading.hide();
    if (loading._.timer) {
      clearInterval(loading._.timer);
      delete loading._.timer;
    }
    screen.render();
  };

  var msg = blessed.box({
    parent: screen,
    hidden: true,
    top: 'center',
    left: 'center',
    width: 'half',
    tags: true,
    align: 'center',
    shrink: true,
    border: {
      type: 'ascii'
    }
  });

  msg._.show = function(text, time, callback) {
    if (typeof time === 'function') {
      callback = time;
      time = null;
    }
    time = time || 3;
    msg.show();
    msg.setContent(text);
    screen.render();
    setTimeout(function() {
      msg.hide();
      screen.render();
      if (callback) callback();
    }, time * 1000);
  };

  msg._.log = msg._.show;

  msg._.error = function(text, callback) {
    return msg._.show('{red-fg}Error: ' + text + '{/}', callback);
  };

  var info = blessed.box({
    parent: screen,
    hidden: true,
    top: 'center',
    left: 'center',
    width: 'half',
    tags: true,
    shrink: true,
    border: {
      type: 'ascii'
    }
  });

  info._.show = function(text, callback) {
    info.show();

    info.setContent(text);

    screen.render();

    function end() {
      if (end.done) return;
      end.done = true;
      info.hide();
      screen.render();
      if (callback) callback();
    }

    return setTimeout(function() {
      screen.on('keypress', function fn(ch, key) {
        if (key.name === 'mouse') return;
        screen.removeListener('keypress', fn);
        end();
      });
      screen.on('mouse', function fn(data) {
        if (data.action === 'mousemove') return;
        screen.removeListener('mouse', fn);
        end();
      });
    }, 10);
  };

  info._.showWelcome = function(callback) {
    var text = '{center}{green-fg}Welcome to jitsu-ui.{/}\n'
      + 'Press {blue-fg}Tab{/} and {blue-fg}Shift+Tab{/} to'
      + ' focus between elements, buttons, and the scroll area. Use vi keys'
      + ' and arrow keys to navigate within any element.{/center}\n'
      + '{right}{red-fg}- Nodejitsu{/}{/right}';
    return info._.show(text, callback);
  };

  return info._.showWelcome();
}

function handleData(data) {
  var user = data.user
    , apps = data.apps;

  data.longest = 0;
  apps.forEach(function(app) {
    if (app.name.length > data.longest) {
      data.longest = app.name.length;
    }
  });

  // Should be this, but for some reason,
  // {red-fg}my-app2{/red-fg} gets wrapped to:
  // {red-fg}my-app\n2{/red-fg} when my-app2
  // does not. Since escape codes are not printable
  // characters, this means wrapContent is doing
  // something wrong and determining length including
  // at least 1 char from the escape code.
  // data.side = Math.min(data.longest + 2, 10);
  data.side = Math.min(data.longest + 3, 10);

  data._user = {
    username: user.username,
    status: user.status || 'unknown',
    email: user.email,
    ctime: new Date(user.ctime).toUTCString(),
    mtime: new Date(user.mtime).toUTCString(),
    permissions: user.permissions || {},
    customer: user.billing ? user.billing.customerId : null,
    profile: user.billing ? user.billing.profileId : null,
    subscription: (function() {
      if (!user.billing || !user.billing.subscriptions) {
        return;
      }

      var subs = user.billing.subscriptions
        , keys = Object.keys(subs)
        , i = 0
        , sub;

      for (; i < keys.length; i++) {
        sub = subs[keys[i]];
        if (!sub.disabled) return sub;
      }
    })(),
    apps: {
      total: apps.length,
      started: apps.filter(function (app) {
        return app.state === 'started';
      }).length
    },
    drones: {
      started: apps.reduce(function(total, app) {
        var drones = app.drones != null && app.state === 'started'
          ? app.drones
          : 0;

        return total + drones;
      }, 0),
      limit: (function() {
        var subs = data.user.billing && data.user.billing.subscriptions;
        if (!subs) return 0;

        var sub = Object.keys(subs).map(function(key) {
          return subs[key];
        }).filter(function(sub) {
          return !sub.disabled;
        })[0];

        if (!sub) return 0;

        switch (sub.plan) {
          case 'individual-micro':
            return 1;
          case 'individual-small':
            return 3;
          case 'individual-regular':
            return 5;
          case 'individual-large':
            return 10;
          case 'business-micro':
            return 2;
          case 'business-small':
            return 5;
          case 'business-regular':
            return 10;
          case 'business-large':
            return 10 + Infinity;
        }

        return 0;
      })()
    }
  };

  data._apps = apps.map(function(app) {
    var cfg = (app.config ? app.config.cloud : null) || [];
    cfg = cfg[0] || {};
    return {
      id: app._id,
      user: app.user,
      name: app.name,
      subdomain: app.subdomain,
      domains: app.domains || [],
      ctime: new Date(app.ctime).toUTCString(),
      mtime: new Date(app.mtime).toUTCString(),
      url: 'http://' + app.subdomain + '.jit.su/',
      organization: app.organization,
      state: app.state,
      drones: app.drones,
      maxDrones: app.maxDrones,
      setDrones: cfg.drones,
      openSource: !!app.openSource,
      running: (app.running || {}).id,
      active: (app.active || {}).id,
      env: app.env,
      databases: app.databases || {},
      provider: cfg.provider,
      datacenter: cfg.datacenter,
      ram: cfg.ram,
      snapshots: (function() {
        var snap = (app.snapshots || []).map(function (snapshot) {
          return snapshot.id;
        });

        var out = snap.slice(-3).reverse();

        if (snap.length - 3 > 0) {
          out.push((snap.length - 3) + ' more...');
        }

        return out;
      })(),
      plan: (function () {
        var user = data.user;

        if (!app.subscriptionId) {
          return 'none (null)';
        }

        if (!user.billing
            || !user.billing.subscriptions
            || !user.billing.subscriptions[app.subscriptionId]) {
          return 'nonexistent (' + app.subscriptionId + ')';
        }

        var sub = user.billing.subscriptions[app.subscriptionId],
            plan = sub.plan;

        plan += ' (' + app.subscriptionId + ')';
        if (sub.disabled) {
          plan += ' (canceled)';
        }

        return plan;
      })()
    };
  });
}

function createScreen() {
  var global = blessed.Screen.global;
  var screen = blessed.Screen.global || blessed.screen({ tput: true });

  if (!global) {
    screen.program.key('C-c', function() {
      return process.exit(0);
    });
  }

  return screen;
}

function createPrompt() {
  var screen = createScreen()
    , prompt = createPrompt.prompt;

  if (prompt) {
    prompt.detach();
    screen.append(prompt);
    return prompt;
  }

  prompt = createPrompt.prompt = blessed.box({
    parent: screen,
    hidden: true,
    content: '',
    width: 'half',
    height: 7,
    left: 'center',
    top: 'center',
    border: {
      type: 'ascii'
    },
    tags: true
  });

  prompt._.input = blessed.textbox({
    parent: prompt,
    top: 3,
    height: 1,
    left: 2,
    right: 2,
    bg: 'black'
  });

  prompt._.okay = blessed.button({
    parent: prompt,
    top: 5,
    height: 1,
    left: 2,
    width: 6,
    content: 'Okay',
    align: 'center',
    bg: 'black',
    hoverBg: 'blue',
    autoFocus: false
  });

  prompt._.cancel = blessed.button({
    parent: prompt,
    top: 5,
    height: 1,
    shrink: true,
    left: 10,
    width: 8,
    content: 'Cancel',
    align: 'center',
    bg: 'black',
    hoverBg: 'blue',
    autoFocus: false
  });

  prompt._.type = function(text, value, callback) {
    var okay, cancel;

    if (!callback) {
      callback = value;
      value = '';
    }

    prompt.show();
    prompt.setContent(' ' + text);

    if (value) prompt._.input.value = value;

    screen.saveFocus();

    prompt._.okay.on('press', okay = function() {
      prompt._.input.submit();
    });

    prompt._.cancel.on('press', cancel = function() {
      prompt._.input.cancel();
    });

    prompt._.input.setInput(function(err, data) {
      prompt.hide();
      screen.restoreFocus();
      prompt._.okay.removeListener('press', okay);
      prompt._.cancel.removeListener('press', cancel);
      return callback(err, data);
    });

    screen.render();
  };

  return prompt;
}

function createQuestion() {
  var screen = createScreen()
    , question = createQuestion.question;

  if (question) {
    question.detach();
    screen.append(question);
    return question;
  }

  question = createQuestion.question = blessed.box({
    parent: screen,
    hidden: true,
    content: '',
    width: 'half',
    height: 5,
    left: 'center',
    top: 'center',
    border: {
      type: 'ascii'
    },
    tags: true
  });

  question._.okay = blessed.button({
    parent: question,
    top: 3,
    height: 1,
    left: 2,
    width: 6,
    content: 'Okay',
    align: 'center',
    bg: 'black',
    hoverBg: 'blue',
    autoFocus: false
  });

  question._.cancel = blessed.button({
    parent: question,
    top: 3,
    height: 1,
    shrink: true,
    left: 10,
    width: 8,
    content: 'Cancel',
    align: 'center',
    bg: 'black',
    hoverBg: 'blue',
    autoFocus: false
  });

  question._.ask = function(text, callback) {
    var press, okay, cancel;

    question.show();
    question.setContent(' ' + text);

    screen.on('keypress', press = function(ch, key) {
      if (key.name === 'mouse') return;
      if (key.name !== 'enter'
          && key.name !== 'escape'
          && key.name !== 'q'
          && key.name !== 'y'
          && key.name !== 'n') {
        return;
      }
      done(null, key.name === 'enter' || key.name === 'y');
    });

    question._.okay.on('press', okay = function() {
      done(null, true);
    });

    question._.cancel.on('press', cancel = function() {
      done(null, false);
    });

    screen.saveFocus();
    question.focus();

    function done(err, data) {
      question.hide();
      screen.restoreFocus();
      screen.removeListener('keypress', press);
      question._.okay.removeListener('press', okay);
      question._.cancel.removeListener('press', cancel);
      return callback(err, data);
    }

    screen.render();
  };

  return question;
}

function getCloud(app, callback) {
  var prompt = createPrompt()
    , cloud = (app && app.config ? app.config.cloud : null) || [];

  cloud = cloud[0] || {};

  cloud.datacenter = cloud.datacenter || 'us-east-1';
  cloud.provider = cloud.provider || 'joyent';
  cloud.drones = cloud.drones || '1';
  cloud.ram = cloud.ram || '256';

  return prompt._.type('Datacenter?', cloud.datacenter, function(err, datacenter) {
    if (err) return callback(err);
    if (datacenter == null) return callback();
    return prompt._.type('Provider?', cloud.provider, function(err, provider) {
      if (err) return callback(err);
      if (provider == null) return callback();
      return prompt._.type('Drones?', cloud.drones, function(err, drones) {
        if (err) return callback(err);
        if (drones == null) return callback();
        return prompt._.type('RAM?', cloud.ram, function(err, ram) {
          if (err) return callback(err);
          if (ram == null) return callback();
          return callback(null, {
            datacenter: datacenter || 'us-east-1',
            provider: provider || 'joyent',
            drones: +drones || 1,
            ram: +ram || 256
          });
        });
      });
    });
  });
}

function auth(callback) {
  if (config.username && (config.password || config.apiToken)) {
    return api.users.view(config.username, function(err, user) {
      if (err) return callback(err);
      return api.apps.list(function(err, apps) {
        if (err) return callback(err);
        return callback(null, user, apps);
      });
    });
  }

  var prompt = createPrompt();

  function typeUsername(callback) {
    if (config.username) return callback();
    return prompt._.type('Type your username:', callback);
  }

  function typePassword(callback) {
    if (config.password) return callback();
    prompt._.input.censor = true;
    return prompt._.type('Type your password:', function(err, res) {
      prompt._.input.censor = false;
      if (err) return callback(err);
      return callback(err, res);
    });
  }

  return signup(function(err, data) {
    if (err) return callback(err);

    if (data) {
      config.username = data.username;
      config.password = data.password;
      return api.users.create(data, function(err) {
        if (err) return callback(err);
        return confirm(function(err, key) {
          if (err) return callback(err);
          if (key == null) return callback(new Error('Bad key.'));
          data.inviteCode = key;
          return api.users.confirm(data, function(err) {
            if (err) return callback(err);
            return api.users.auth(function(err, success) {
              if (err) return callback(err);
              if (!success) return callback(new Error('Bad login.'));
              return api.users.view(config.username, function(err, user_) {
                if (err) return callback(err);
                if (user_.apiTokens) {
                  config.apiToken = user_.apiTokens[config.apiToken || 'jitsu'];
                }
                if (config.apiToken) {
                  config.apiTokenName = config.apiTokenName || 'jitsu';
                  delete config.password;
                }
                // return save(function() {
                return api.apps.list(function(err, apps_) {
                  if (err) return callback(err);
                  return callback(null, user_, apps_);
                });
              });
            });
          });
        });
      });
    }

    return typeUsername(function(err, username) {
      if (err) return callback(err);
      if (username == null) return callback(new Error('Bad username.'));
      if (username) config.username = username;
      return typePassword(function(err, password) {
        if (err) return callback(err);
        if (password == null) return callback(new Error('Bad password.'));
        if (password) config.password = password;
        prompt.detach();
        return api.users.auth(function(err, success) {
          if (err) return callback(err);
          return api.users.view(username, function(err, user_) {
            if (err) return callback(err);
            if (user_.apiTokens) {
              config.apiToken = user_.apiTokens[config.apiToken || 'jitsu'];
            }
            if (config.apiToken) {
              config.apiTokenName = config.apiTokenName || 'jitsu';
              delete config.password;
            }
            // return save(function() {
            return api.apps.list(function(err, apps_) {
              if (err) return callback(err);
              return callback(null, user_, apps_);
            });
          });
        });
      });
    });
  });
}

function signup(callback) {
  var question = createQuestion();
  return question._.ask('Do you want to signup? (y/n)', function(err, res) {
    question.detach();
    if (err) return callback(err);
    if (!res) return callback();
    var prompt = createPrompt();
    return prompt._.type('Type your username:', function(err, username) {
      if (err) return callback(err);
      if (username == null) return callback(new Error('Bad username.'));
      return prompt._.type('Type your email:', function(err, email) {
        if (err) return callback(err);
        if (email == null) return callback(new Error('Bad email.'));
        prompt._.input.censor = true;
        return prompt._.type('Type your password:', function(err, password) {
          prompt._.input.censor = false;
          if (err) return callback(err);
          if (password == null) return callback(new Error('Bad password.'));
          return callback(null, {
            username: username,
            email: email,
            password: password
          });
        });
      });
    });
  });
}

function confirm(callback) {
  var prompt = createPrompt();
  return prompt._.type('Activation key:', function(err, key) {
    return callback(err, key);
  });
}

function formatMain(opt, data, width) {
  var out = '';

  var longest = 0;
  Object.keys(data).forEach(function(key) {
    if (key.length > longest) {
      longest = key.length;
    }
  });

  Object.keys(data).forEach(function(key) {
    var val = data[key];
    if (val == null) {
      val = 'none';
    } else if (Array.isArray(val)) {
      var o = [];
      val.forEach(function(v) {
        o.push(typeof v !== 'string' ? JSON.stringify(v) : v + '');
      });
      val = o.join(', ') || 'none';
    } else if (typeof val === 'object') {
      var o = [];
      Object.keys(val).forEach(function(k) {
        var v = val[k];
        o.push(k + '=' + (typeof v !== 'string' ? JSON.stringify(v) : v + ''));
      });
      val = o.join(', ') || 'none';
    } else if (typeof val !== 'string') {
      val = JSON.stringify(val);
    }

    // App-only:
    if (data.user && data.name && key === 'state') {
      if (val === 'started') {
        val = '{green-fg}' + val + '{/green-fg}';
      }
      if (val === 'stopped') {
        val = '{red-fg}' + val + '{/red-fg}';
      }
    }

    if (longest + val.length >= width - 7) {
      val = val.substring(0, width - longest - 14) + '...';
    }
    out += '{blue-fg}' + key + ':{/} '
      + (opt.fix ? Array(longest - key.length + 1 + 1).join(' ') : '')
      + val + '\n';
  });

  return out;
}

function parseArg(argv) {
  var argv = argv.slice(2)
    , options = {}
    , files = [];

  function getarg() {
    var arg = argv.shift();

    if (arg.indexOf('--') === 0) {
      // e.g. --opt
      arg = arg.split('=');
      if (arg.length > 1) {
        // e.g. --opt=val
        argv.unshift(arg.slice(1).join('='));
      }
      arg = arg[0];
    } else if (arg[0] === '-') {
      if (arg.length > 2) {
        // e.g. -abc
        argv = arg.substring(1).split('').map(function(ch) {
          return '-' + ch;
        }).concat(argv);
        arg = argv.shift();
      } else {
        // e.g. -a
      }
    } else {
      // e.g. foo
    }

    return arg;
  }

  while (argv.length) {
    arg = getarg();
    switch (arg) {
      case 'ui':
        break;
      case '-h':
      case '--help':
        return help();
      case '--debug':
        options.debug = true;
        break;
      case '--mock':
        options.mock = true;
        break;
      default:
        files.push(arg);
        break;
    }
  }

  return options;
}

function help() {
  console.log('jitsu-ui - a text ui for jitsu.');
  return process.exit(0);
}

function setup(callback) {
  opt.userconfig = opt.userconfig || process.env.HOME + '/.jitsuconf';

  function read(cb) {
    if (!callback) {
      try {
        var data = fs.readFileSync(opt.userconfig, 'utf8');
      } catch (e) {
        return cb(e);
      }
      return cb(null, data);
    }
    return fs.readFile(opt.userconfig, 'utf8', cb);
  }

  return read(function(err, data) {
    try {
      config = JSON.parse(data);
    } catch (e) {
      config = {};
    }

    if (!config.remoteUri) {
      config.remoteUri = (config.protocol || 'https') + '://'
        + (config.remoteHost || 'api.nodejitsu.com')
        + (config.port ? ':' + config.port : '');
    }

    if (~process.argv.indexOf('--mock')) {
      api = require('../lib/debug');
    } else {
      api = {};
      ['Users', 'Apps', 'Snapshots',
       'Databases', 'Logs', 'Tokens'].forEach(function(key) {
        var k = key.toLowerCase();
        api[k] = new napi[key](config);
      });
    }

    if (callback) return callback();
  });
}

function save(callback) {
  var uri = config.remoteUri;
  delete config.remoteUri;
  var data = JSON.stringify(config, null, 2);
  config.remoteUri = uri;

  if (!callback) {
    try {
      fs.writeFileSync(opt.userconfig, data);
    } catch (e) {
      ;
    }
    return;
  }

  return fs.writeFile(opt.userconfig, data, callback);
}

function tempSave(callback) {
  try {
    fs.writeFileSync(opt.userconfig + '.tmp', JSON.stringify(config, null, 2));
  } catch (e) {
    ;
  }
}

function tempRemove(callback) {
  try {
    fs.unlinkSync(opt.userconfig + '.tmp', data);
  } catch (e) {
    ;
  }
}

function main(argv, callback) {
  opt = parseArg(argv);

  return setup(function() {
    return auth(function(err, user, apps) {
      if (err) return callback(err);

      var data = {};

      if (user) {
        data.user = user;
        data.user = data.user.user || data.user;
      }

      if (apps) {
        data.apps = apps;
      }

      return start(data, function(err) {
        if (err) return callback(err);
        return callback();
      });
    });
  });
}

if (!module.parent) {
  process.title = 'jitsu-ui';
  main(process.argv.slice(), function(err) {
    if (err) throw err;
    return process.exit(0);
  });
} else {
  module.exports = main;
}
